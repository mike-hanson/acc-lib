<Page x:Class="Acc.Lib.Gallery.Views.Pages.AccDetectionPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:local="clr-namespace:Acc.Lib.Gallery.Views.Pages"
      xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
      xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
      xmlns:controls="clr-namespace:Acc.Lib.Gallery.Controls"
      mc:Ignorable="d"
      d:DataContext="{d:DesignInstance local:AccDetectionPage,
                                     IsDesignTimeCreatable=False}"
      ui:Design.Background="{DynamicResource ApplicationBackgroundBrush}"
      ui:Design.Foreground="{DynamicResource TextFillColorPrimaryBrush}"
      Foreground="{DynamicResource TextFillColorPrimaryBrush}"
      Title="ACC Detection"
      >
    <b:Interaction.Triggers>
        <b:EventTrigger EventName="Loaded">
            <b:InvokeCommandAction Command="{Binding ViewModel.StartCommand}" />
        </b:EventTrigger>
        <b:EventTrigger EventName="Unloaded">
            <b:InvokeCommandAction Command="{Binding ViewModel.StopCommand}" />
        </b:EventTrigger>
    </b:Interaction.Triggers>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <Grid Grid.Row="1">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition />
            </Grid.RowDefinitions>
            <TextBlock Grid.Column="0"
                       Grid.Row="0"
                       Margin="20"
                       TextWrapping="WrapWithOverflow">
                In your application you probably don't want to attempt access to ACC if it is not running.
                From a user perspective it is not a great experience if they have to remember to start ACC before
                staring
                your application.
                Most users would probably prefer it if your application could be run anytime, or left running all the
                time.
                To facilitate this
                your application should detect when ACC starts or stops and respond automatically.  For example
                automatically start recording telemetry when ACC is running and a session starts.
                <LineBreak />
                <LineBreak />
                Acc.Lib helps you with the first part of this via the AccDetector type.  Once initialised and started
                the
                AccDetector provides an observable stream of notifications when ACC starts and stops.
                <LineBreak />
                <LineBreak />
                Below is an example of how you might display an indicator in a Status Bar or Tool Bar showing when ACC
                is
                running.  When ACC is running the circle will change to green, otherwise it will be blue.  Try starting
                and
                stopping ACC while this page is displayed.
            </TextBlock>
            <Grid Grid.Column="0"
                  Grid.Row="1"
                  VerticalAlignment="Top"
                  HorizontalAlignment="Left">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition />
                </Grid.ColumnDefinitions>
                <Label Grid.Column="0" Content="ACC:"
                       VerticalAlignment="Center"
                       FontWeight="Bold" />
                <Image Grid.Column="1"
                       ToolTip="Indicates whether ACC is running on this computer"
                       Height="24"
                       Width="24"
                       Margin="0 0 5 0">
                    <Image.Style>
                        <Style TargetType="{x:Type Image}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ViewModel.IsAccRunning}"
                                             Value="True">
                                    <Setter Property="Source"
                                            Value="/Assets/button_green.png" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding ViewModel.IsAccRunning}"
                                             Value="False">
                                    <Setter Property="Source"
                                            Value="/Assets/button_blue.png" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Image.Style>
                </Image>
            </Grid>
            <ui:CardExpander Grid.Row="2"
                             CornerRadius="8"
                             Header="Code Examples"
                             Margin="20">
                <StackPanel>
                    <TextBlock TextWrapping="WrapWithOverflow" Margin="0 10">
                        The examples below show how the above indicator is implemented.  In the Xaml example data triggers are used to change the image source when the value of the IsAccRunning property on the view model changes.
                        The C# example is a view model that uses AccDetector to update IsAccRunning when ACC is started or stopped.
                    </TextBlock>
                    <StackPanel x:Name="XamlCodeBlock">
                        <ui:TextBlock Margin="0,0,0,5"
                                      FontTypography="BodyStrong"
                                      Foreground="{DynamicResource TextFillColorPrimaryBrush}"
                                      Text="XAML" />

                        <controls:CodeBlock Padding="0"
                                          Background="DarkGray"
                                          BorderBrush="Transparent"
                                          BorderThickness="0"
                                          Code="{Binding ViewModel.XamlCode}"
                                          CodeLanguage="Xaml"/>
                    </StackPanel>

                    <Border x:Name="Border"
                            Margin="0,20"
                            BorderThickness="1"
                            Visibility="Visible" />

                    <StackPanel x:Name="CsharpCodeBlock">
                        <ui:TextBlock Margin="0,0,0,5"
                                      FontTypography="BodyStrong"
                                      Foreground="{DynamicResource TextFillColorPrimaryBrush}"
                                      Text="C#" />

                        <controls:CodeBlock Padding="0"
                                          Background="DarkGray"
                                          BorderBrush="Transparent"
                                          BorderThickness="0"
                                          Code="{Binding ViewModel.CSharpCode}"
                                          CodeLanguage="CSharp"/>
                    </StackPanel>
                </StackPanel>
            </ui:CardExpander>
        </Grid>
    </Grid>
</Page>
